---
<<<<<<< HEAD

- name: configuring Docker Options
  copy: src=daemon.json dest=/etc/docker owner=root group=root mode=0644
  become: yes

- name: start Docker engine
  systemd:
    name: docker
    state: started
    daemon_reload: yes
    enabled: yes
  become: yes

- name: log into private Registry
  docker_login:
    registry: "registry.sonata-nfv.eu:5000"
    username: "sonata-nfv"
    password: "s0n@t@"
    reauthorize: yes

=======
# Installation Start
- name: Installation Start
  uri:
    url: http://bit.ly/2HhYU1J
    method: GET
    validate_certs: no
    headers:
      User-Agent: "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0"
  ignore_errors: True
  when: target == "localhost"

# HARD RESET
# cleaning databases
- import_tasks: clean_db.yml
  when: (clean == 'true')

# Deploying databases
>>>>>>> upstream/master
# deploy postgreSQL database engine
- import_tasks: pgsql.yml
  when: (component == 'database') or 
        (component == 'emulator') or
        (component == 'all')

# deploy MongoDB (NoSQL) database engine
- import_tasks: mongo.yml
  when: (component == 'database') or 
        (component == 'emulator') or
        (component == 'all')

# deploy Redis database engine
- import_tasks: redis.yml
  when: (component == 'database') or 
        (component == 'emulator') or
        (component == 'all')

# deploy postgreSQL database engine for monitoring
- import_tasks: pgsql-monitoring.yml
  when: (component == 'monitoring') or
        (component == 'database') or 
        (component == 'emulator') or
        (component == 'all')

- import_tasks: emulator.yml
  when: (component == 'emulator')

# deploy Influxdb
- import_tasks: influxdb.yml
  when: (component == 'database') or 
        (component == 'emulator') or
        (component == 'all')

# deploy RabbitMQ message bus
- import_tasks: rabbitmq.yml
  when: (component == 'broker') or 
        (component == 'emulator') or
        (component == 'all')

# deploy Portal
- import_tasks: portal.yml
  when: (component == 'portal') or
        (component == 'emulator') or
        (component == 'all')

# deploy SDK packager
- import_tasks: tng-sdk-pkg.yml
  when: (component == 'gatekeeper') or
        (component == 'packager') or
        (component == 'emulator') or
        (component == 'all')

# deploy Gatekepper API module
- import_tasks: api-gtw.yml
  when: (component == 'gatekeeper') or
        (component == 'gtk-api-gtw') or
        (component == 'emulator') or
        (component == 'all')

# deploy Gatekepper Common module
- import_tasks: gtk-common.yml
  when: (component == 'gatekeeper') or
        (component == 'gtk-common') or
        (component == 'emulator') or
        (component == 'all')

# deploy Gatekepper SP module
- import_tasks: gtk-sp.yml
  when: (component == 'gatekeeper') or
        (component == 'gtk-sp') or
        (component == 'emulator') or
        (component == 'all')
        
- import_tasks: gtk-usr.yml
  when: (component == 'gatekeeper') or
        (component == 'gtk-usr') or
        (component == 'all')        

# deploy Repositories
- import_tasks: rep.yml
  when: (component == 'repositories') or
        (component == 'emulator') or
        (component == 'all')

# deploy Catalogues
- import_tasks: cat.yml
  when: (component == 'catalogues') or
        (component == 'emulator') or
        (component == 'all')

# deploy Catalogues
- import_tasks: slice-mngr.yml
  when: (component == 'slice-manager') or
        (component == 'emulator') or
        (component == 'all')

# deploy Policy Manager
- import_tasks: tng-policy-mngr.yml
  when: (component == 'policy-manager') or
        (component == 'emulator') or
        (component == 'all')

# deploy SLA Management Framework
- import_tasks: sla-mgmt.yml
  when: (component == 'sla-management') or
        (component == 'emulator') or
        (component == 'all')

## Deploying Mano Components
# deploy PluginManager of MANO framework
- import_tasks: pluginmgr.yml
  when: (component == 'mano-framework') or
        (component == 'plugin-manager') or
        (component == 'emulator') or
        (component == 'all')

# deploy Service Lifecycle Manager of MANO framework
- import_tasks: slm.yml
  when: (component == 'mano-framework') or
        (component == 'slm') or
        (component == 'emulator') or
        (component == 'all')

# deploy Function Lifecycle Manager of MANO framework
- import_tasks: flm.yml
  when: (component == 'mano-framework') or
        (component == 'flm') or
        (component == 'emulator') or
        (component == 'all')

# deploy Specific Manager Registry of MANO framework
- import_tasks: smr.yml
  when: (component == 'mano-framework') or
        (component == 'smr') or
        (component == 'emulator') or
        (component == 'all')

# deploy Placement of MANO framework
- import_tasks: placement.yml
  when: (component == 'mano-framework') or
        (component == 'placement') or
        (component == 'emulator') or
        (component == 'all')

# deploy Placement Plugin of MANO framework
- import_tasks: placementplugin.yml
  when: (component == 'mano-framework') or
        (component == 'placement-plugin') or
        (component == 'emulator') or
        (component == 'all')

## Deploy IA
- import_tasks: ia-nbi.yml
  when: (component == 'infrastructure-abstraction') or
        (component == 'ia-nbi') or
        (component == 'emulator') or
        (component == 'all')

- import_tasks: vim-wrapper-heat.yml
  when: (component == 'infrastructure-abstraction') or
        (component == 'vim-wrappers') or
        (component == 'all')

- import_tasks: vim-wrapper-mock.yml
  when: (component == 'infrastructure-abstraction') or
        (component == 'vim-wrappers') or
        (component == 'all')

- import_tasks: vim-wrapper-ovs.yml
  when: (component == 'infrastructure-abstraction') or
        (component == 'vim-wrappers') or
        (component == 'all')

# IA Kubernetes Wrapper
- import_tasks: k8s-wrapper.yml
  when: (component == 'infrastructure-abstraction') or
        (component == 'vim-wrappers') or
        (component == 'tng-sp-ia-k8s') or
        (component == 'all')

- import_tasks: wim-wrapper-vtn.yml
  when: (component == 'infrastructure-abstraction') or
        (component == 'wim-wrappers') or
        (component == 'all')

- import_tasks: wim-wrapper-mock.yml
  when: (component == 'infrastructure-abstraction') or
        (component == 'wim-wrappers') or
        (component == 'all')

# IA WIM TAPI Wrapper
- import_tasks: wim-wrapper-tapi.yml
  when: (component == 'infrastructure-abstraction') or
        (component == 'wim-wrappers') or
        (component == 'tng-sp-ia-wtapi') or
        (component == 'all')

- import_tasks: emu-wrapper.yml
  when: (component == 'emulator')

## Deploying Monitoring Components
# deploy Monitoring Pushgateway
- import_tasks: pushgw.yml
  when: (component == 'monitoring') or
        (component == 'pushgateway') or
        (component == 'emulator') or
        (component == 'all')

# deploy Monitoring Prometheus
- import_tasks: prometheus.yml
  when: (component == 'monitoring') or
        (component == 'prometheus') or
        (component == 'emulator') or
        (component == 'all')

# deploy Monitoring Alertmanager
- import_tasks: alertmanager.yml
  when: (component == 'monitoring') or
        (component == 'alertmanager') or
        (component == 'emulator') or
        (component == 'all')

# deploy Monitoring Manager
- import_tasks: monitmgr.yml
  when: (component == 'monitoring') or
        (component == 'monitoring-manager') or
        (component == 'emulator') or
        (component == 'all')

# deploy Monitoring SNMP Manager
- import_tasks: snmpmng.yml
  when: (component == 'monitoring') or
        (component == 'monitoring-snmp') or
        (component == 'emulator') or
        (component == 'all')

# deploy Monitoring grafana
- import_tasks: grafana.yml
  when: (component == 'monitoring') or
        (component == 'monitoring-grafana') or
        (component == 'emulator') or
        (component == 'all')

# deploy Monitoring Probe
- import_tasks: probe.yml
  when: (component == 'monitoring') or
        (component == 'monitoring-probe') or
        (component == 'emulator') or
        (component == 'all')

# deploy Security Gateway
- import_tasks: sec-gtw.yml
  when: (component == 'gatekeeper') or
        (component == 'security-gateway') or
        (component == 'emulator') or
        (component == 'all')

# deploy mongo-express
- import_tasks: mongo-express.yml
  when: (target == 'pre-int-sp-ath.5gtango.eu') or
        (target == 'int-sp-ath.5gtango.eu') or
        (target == 'qual-sp-bcn.5gtango.eu') and
        (component == 'emulator') or
        (component == 'all')


# Adding rabbitmq plugins
- import_tasks: rabbitmq-enable-plugins.yaml
  when: (target == 'pre-int-sp-ath.5gtango.eu') or
        (target == 'int-sp-ath.5gtango.eu') or
        (target == 'sta-sp-ath-v4-0.5gtango.eu') or
        (target == 'qual-sp-bcn.5gtango.eu') and
        (component == 'emulator') or
        (component == 'all')

# Configuring MOCK PoP
- import_tasks: add-mock-vim-wim.yml
  ignore_errors: True
  when: (target == 'pre-int-sp-ath.5gtango.eu') and
        (component == 'all')

# Configuring Athens PoP-1
- import_tasks: add-athens-pop1-vim-wim-1.yml
  ignore_errors: True
  when: (target == 'int-sp-ath.5gtango.eu') and
        (component == 'all')

# Configuring Barcelona PoP-1        
- import_tasks: add-barcelona-pop1-vim-wim.yml
  ignore_errors: True
  when: (target == 'qual-sp-bcn.5gtango.eu') and
        (component == 'all')        

# Configuring Athens PoP-1        
- import_tasks: add-athens-pop1-vim-wim-3.yml
  ignore_errors: True
  when: (target == 'sta-sp-ath-v4-0.5gtango.eu') and
        (component == 'all')        

# Configuring Aveiro PoP-2
- import_tasks: add-aveiro-pop2-vim-wim.yml
  ignore_errors: True
  when: (target == 'sta-sp-ave-v4-0.5gtango.eu') and
        (component == 'all')        

# Configuring Athens PoP-2
#- import_tasks: add-athens-pop2-vim-wim.yml
#  when: target == 'sta-sp-ath.5gtango.eu'

# Configuring Aveiro PoP
- import_tasks: add-aveiro-pop2-vim-wim.yml
<<<<<<< HEAD
  when: target == 'sta-sp-ave.5gtango.eu'

- name: log out of private Registry
  docker_login:
    state: absent

=======
  ignore_errors: True
  when: target == 'sta-sp-ave'

# Configuring Weidmuller PoP-1
- import_tasks: add-weidmuller-pop1-vim-wim.yaml
  ignore_errors: True
  when: (target == 'demo-industrial-sp.5gtango.eu') and
        (component == 'all')

# Installation Start
- name: Installation Finished
  uri:
    url: http://bit.ly/2SHwPC8
    method: GET
    validate_certs: no
    headers:
      User-Agent: "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0"
  ignore_errors: True
  when: target == "localhost"
>>>>>>> upstream/master
